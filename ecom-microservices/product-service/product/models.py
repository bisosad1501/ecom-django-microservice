from djongo import models
from django.core.validators import MinValueValidator, MaxValueValidator
from decimal import Decimal

class ProductType(models.TextChoices):
    BOOK = 'BOOK', 'Book'
    SHOE = 'SHOE', 'Shoe'
    ELECTRONIC = 'ELECTRONIC', 'Electronic'
    CLOTHING = 'CLOTHING', 'Clothing'
    HOME_APPLIANCE = 'HOME_APPLIANCE', 'Home Appliance'  # ƒê·ªì gia d·ª•ng
    FURNITURE = 'FURNITURE', 'Furniture'  # N·ªôi th·∫•t
    BEAUTY = 'BEAUTY', 'Beauty & Personal Care'  # M·ªπ ph·∫©m
    FOOD = 'FOOD', 'Food & Beverage'  # Th·ª±c ph·∫©m
    SPORTS = 'SPORTS', 'Sports & Outdoors'  # ƒê·ªì th·ªÉ thao
    TOYS = 'TOYS', 'Toys & Games'  # ƒê·ªì ch∆°i
    AUTOMOTIVE = 'AUTOMOTIVE', 'Automotive'  # ƒê·ªì xe c·ªô
    PET_SUPPLIES = 'PET_SUPPLIES', 'Pet Supplies'  # ƒê·ªì d√πng th√∫ c∆∞ng
    HEALTH = 'HEALTH', 'Health & Wellness'  # S·∫£n ph·∫©m s·ª©c kh·ªèe
    OFFICE = 'OFFICE', 'Office Supplies'  # ƒê·ªì vƒÉn ph√≤ng ph·∫©m
    MUSIC = 'MUSIC', 'Musical Instruments'  # Nh·∫°c c·ª•

class ProductStatus(models.TextChoices):
    DRAFT = 'DRAFT', 'Draft'  # Ch∆∞a ho√†n thi·ªán, ch∆∞a b√°n
    ACTIVE = 'ACTIVE', 'Active'  # ƒêang b√°n b√¨nh th∆∞·ªùng
    OUT_OF_STOCK = 'OUT_OF_STOCK', 'Out of Stock'  # H·∫øt h√†ng
    DISCONTINUED = 'DISCONTINUED', 'Discontinued'  # Ng·ª´ng kinh doanh
    PRE_ORDER = 'PRE_ORDER', 'Pre-Order'  # ƒê·∫∑t tr∆∞·ªõc
    BACK_ORDER = 'BACK_ORDER', 'Back Order'  # Ch·ªù nh·∫≠p h√†ng
    LIMITED = 'LIMITED', 'Limited Edition'  # Phi√™n b·∫£n gi·ªõi h·∫°n
    EXPIRED = 'EXPIRED', 'Expired'  # H·∫øt h·∫°n (cho th·ª±c ph·∫©m, m·ªπ ph·∫©m)
    RESTRICTED = 'RESTRICTED', 'Restricted'  # B·ªã gi·ªõi h·∫°n b√°n (v√≠ d·ª•: h√†ng c·∫•m, h√†ng ƒë·∫∑c bi·ªát)
    BANNED = 'BANNED', 'Banned'  # B·ªã kh√≥a do vi ph·∫°m ch√≠nh s√°ch

class Product(models.Model):
    _id = models.ObjectIdField(primary_key=True)
    sku = models.CharField(max_length=50, unique=True)
    name = models.CharField(max_length=255)
    product_type = models.CharField(max_length=50, choices=ProductType.choices)
    category_path = models.JSONField(default=list)

    # üîπ **Gi√° c·∫£** - S·ª≠ d·ª•ng FloatField thay v√¨ DecimalField
    base_price = models.FloatField(validators=[MinValueValidator(0.01)])
    sale_price = models.FloatField(null=True, blank=True)

    # üîπ **T·ªìn kho**
    quantity = models.IntegerField(default=0)
    low_stock_threshold = models.IntegerField(default=10)

    # üîπ **H√¨nh ·∫£nh**
    primary_image = models.URLField()
    image_urls = models.JSONField(default=list, blank=True)

    # üîπ **Th√¥ng tin nh√† b√°n h√†ng**
    seller_id = models.CharField(max_length=50, null=True, blank=True)
    vendor_id = models.CharField(max_length=50, null=True, blank=True)
    brand = models.CharField(max_length=100, null=True, blank=True)

    # üîπ **Tr·∫°ng th√°i**
    status = models.CharField(max_length=20, choices=ProductStatus.choices, default=ProductStatus.ACTIVE)

    # üîπ **Metrics**
    total_views = models.IntegerField(default=0)
    total_sold = models.IntegerField(default=0)

    # üîπ **M·ªõi th√™m**
    rating = models.FloatField(default=0, validators=[MinValueValidator(0), MaxValueValidator(5)])  # ‚≠ê 0-5
    review_count = models.IntegerField(default=0)  # üìù T·ªïng s·ªë ƒë√°nh gi√°

    weight = models.FloatField(null=True, blank=True)  # ‚öñÔ∏è Tr·ªçng l∆∞·ª£ng s·∫£n ph·∫©m
    dimensions = models.JSONField(default=dict, blank=True)  # üìè {'length': 30, 'width': 20, 'height': 10}

    tags = models.JSONField(default=list, blank=True)  # üîñ ['electronics', 'gaming', 'sony']

    # üîπ **Th·ªùi gian**
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    last_sold_at = models.DateTimeField(null=True, blank=True)

    class Meta:
        db_table = 'products'
        indexes = [
            models.Index(fields=['sku']),
            models.Index(fields=['product_type']),
            models.Index(fields=['status']),
            models.Index(fields=['seller_id']),
            models.Index(fields=['total_sold']),
            models.Index(fields=['brand']),
        ]

    def __str__(self):
        return f"{self.name} ({self.sku})"

    @property
    def current_price(self):
        """L·∫•y gi√° hi·ªán t·∫°i"""
        return self.sale_price if self.sale_price else self.base_price

    def update_stock(self, quantity_change: int):
        """C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng t·ªìn kho"""
        new_quantity = self.quantity + quantity_change
        if new_quantity < 0:
            raise ValueError("Stock cannot be negative")

        self.quantity = new_quantity

        if new_quantity == 0:
            self.status = ProductStatus.OUT_OF_STOCK
        elif self.status == ProductStatus.OUT_OF_STOCK and new_quantity > 0:
            self.status = ProductStatus.ACTIVE

        self.save()

    def update_metrics(self, sale_amount: float = None):
        """C·∫≠p nh·∫≠t doanh s·ªë"""
        if sale_amount:
            self.total_sold += 1
        self.save()

    def save(self, *args, **kwargs):
        # ƒê·∫£m b·∫£o t√≠nh nh·∫•t qu√°n gi·ªØa product_type v√† category_path
        product_type_mapping = {
            'BOOK': 'Books',
            'SHOE': 'Shoes',
            'ELECTRONIC': 'Electronics',
            'CLOTHING': 'Clothing',
            'HOME_APPLIANCE': 'Home Appliances',
            'FURNITURE': 'Furniture',
            'BEAUTY': 'Beauty & Personal Care',
            'FOOD': 'Food & Beverage',
            'SPORTS': 'Sports Equipment',
            'TOYS': 'Toys & Games',
            'AUTOMOTIVE': 'Automotive',
            'PET_SUPPLIES': 'Pet Supplies',
            'HEALTH': 'Health & Wellness',
            'OFFICE': 'Office Supplies',
            'MUSIC': 'Musical Instruments'
        }
        
        # ƒê·∫£m b·∫£o category_path kh√¥ng r·ªóng
        if not self.category_path or len(self.category_path) == 0:
            # N·∫øu category_path tr·ªëng, t·∫°o m·∫∑c ƒë·ªãnh t·ª´ product_type
            self.category_path = [product_type_mapping.get(self.product_type, self.product_type)]
        else:
            # ƒê·∫£m b·∫£o ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n kh·ªõp v·ªõi product_type
            expected_category = product_type_mapping.get(self.product_type)
            if expected_category and self.category_path[0] != expected_category:
                # Ghi l·∫°i thay ƒë·ªïi v√†o log ƒë·ªÉ d·ªÖ debug
                print(f"Chu·∫©n h√≥a category_path t·ª´ {self.category_path[0]} th√†nh {expected_category} cho s·∫£n ph·∫©m {self.name}")
                self.category_path[0] = expected_category
                
        super().save(*args, **kwargs)