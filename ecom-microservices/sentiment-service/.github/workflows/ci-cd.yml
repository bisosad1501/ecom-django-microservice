name: Sentiment Service CI/CD

on:
  push:
    branches: [main]
    paths:
      - 'sentiment-service/**'
  pull_request:
    branches: [main]
    paths:
      - 'sentiment-service/**'
  workflow_dispatch:

jobs:
  test:
    name: Test Sentiment Service
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        working-directory: ./sentiment-service
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest pytest-cov flake8

      - name: Download NLTK data
        run: |
          python -c "import nltk; nltk.download('stopwords'); nltk.download('punkt')"

      - name: Lint with flake8
        working-directory: ./sentiment-service
        run: |
          flake8 src --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings
          flake8 src --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test with pytest
        working-directory: ./sentiment-service
        run: |
          pytest -v tests/

      - name: Upload test coverage report
        uses: actions/upload-artifact@v3
        with:
          name: test-coverage-report
          path: ./sentiment-service/coverage.xml

  build-and-push:
    name: Build and Push Docker Image
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.DOCKER_HUB_USERNAME }}/sentiment-service
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=ref,event=branch
            type=sha,format=long

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./sentiment-service
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/sentiment-service:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/sentiment-service:buildcache,mode=max

  deploy:
    name: Deploy to Production
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    environment:
      name: production
      url: ${{ steps.deploy.outputs.service_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}

      - name: Deploy to EKS
        id: deploy
        run: |
          # Replace image tag in deployment file
          sed -i 's|IMAGE_TAG|${{ github.sha }}|g' ./sentiment-service/k8s/deployment.yaml
          
          # Apply Kubernetes manifests
          kubectl apply -f ./sentiment-service/k8s/
          
          # Wait for deployment to be available
          kubectl rollout status deployment/sentiment-service -n microservices
          
          # Get service URL
          SERVICE_URL=$(kubectl get service sentiment-service -n microservices -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          echo "service_url=https://$SERVICE_URL" >> $GITHUB_OUTPUT
          
          echo "Deployed to $SERVICE_URL"

      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
          text: "Sentiment Service deployment ${{ job.status }}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always() 