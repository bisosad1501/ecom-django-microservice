from rest_framework.exceptions import PermissionDenied
from rest_framework.permissions import AllowAny, IsAuthenticated, IsAdminUser
from rest_framework_simplejwt.tokens import RefreshToken
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status, generics
from django.contrib.auth import authenticate, login
from django.utils import timezone
from django.shortcuts import get_object_or_404
from .models import User, CustomerProfile, SellerProfile, EmailVerification, PasswordReset, LoginHistory, AuditLog
from .serializers import (
    UserSerializer,
    UserRegisterSerializer,
    LoginSerializer,
    CustomerSerializer,
    SellerSerializer,
    SellerRequestSerializer,
    ApproveSellerSerializer,
    AdminCreateUserSerializer,
    UserProfileSerializer,
    ChangePasswordSerializer,
    PasswordResetRequestSerializer,
    PasswordResetConfirmSerializer,
    EmailVerificationSerializer,
    TwoFactorSetupSerializer,
    TwoFactorVerifySerializer,
    LogoutSerializer,
    LoginHistorySerializer,
    UserDetailSerializer
)
from rest_framework.permissions import BasePermission
from rest_framework_simplejwt.authentication import JWTAuthentication
from uuid import UUID
from rest_framework_simplejwt.tokens import RefreshToken, TokenError
from rest_framework_simplejwt.exceptions import TokenError
from django.core.mail import send_mail
from django.conf import settings
from django.template.loader import render_to_string
from django.utils.html import strip_tags
import socket
from django.utils.http import urlsafe_base64_encode, urlsafe_base64_decode
from django.contrib.sites.shortcuts import get_current_site
from django.db.models import Q
from django.shortcuts import render, get_object_or_404
from django.http import JsonResponse
from .permissions import IsAdmin, IsSeller, IsCustomer, IsSelf, IsAccountOwner, IsSellerProfileOwner, IsVerifiedUser


def convert_uuid_to_str(obj):
    if isinstance(obj, UUID):
        return str(obj)
    return obj


# Permission classes v·ªõi JWT Token
class TokenRequiredPermission(BasePermission):
    """Base permission class y√™u c·∫ßu JWT token v√† x√°c th·ª±c user"""

    def has_permission(self, request, view):
        try:
            jwt_authenticator = JWTAuthentication()
            response = jwt_authenticator.authenticate(request)
            if response is None:
                return False
            user, token = response
            return bool(user and user.is_authenticated)
        except:
            return False


class AdminTokenPermission(TokenRequiredPermission):
    """Permission cho Admin v·ªõi JWT token"""

    def has_permission(self, request, view):
        return super().has_permission(request, view) and request.user.is_admin


class SellerTokenPermission(TokenRequiredPermission):
    """Permission cho Seller v·ªõi JWT token"""

    def has_permission(self, request, view):
        return super().has_permission(request, view) and request.user.is_seller


class CustomerTokenPermission(TokenRequiredPermission):
    """Permission cho Customer v·ªõi JWT token"""

    def has_permission(self, request, view):
        return super().has_permission(request, view) and request.user.is_customer


class IsOwnerOrAdmin(BasePermission):
    """
    Custom permission to only allow owners of an object or admins to edit it.
    """

    def has_object_permission(self, request, view, obj):
        # Check if the user is the owner of the object or an admin
        return obj == request.user or request.user.role == 'admin'


# API Views
class LoginAPI(APIView):
    """API ƒêƒÉng nh·∫≠p"""
    serializer_class = LoginSerializer
    permission_classes = [AllowAny]

    def post(self, request, *args, **kwargs):
        serializer = self.serializer_class(data=request.data, context={'request': request})
        serializer.is_valid(raise_exception=True)
        user = serializer.validated_data['user']
        
        # Ki·ªÉm tra tr·∫°ng th√°i t√†i kho·∫£n
        if user.status == 'banned':
            return Response({'detail': 'T√†i kho·∫£n ƒë√£ b·ªã kh√≥a.'}, status=status.HTTP_403_FORBIDDEN)
        
        # L∆∞u l·ªãch s·ª≠ ƒëƒÉng nh·∫≠p
        LoginHistory.objects.create(
            user=user,
            ip_address=self.get_client_ip(request),
            user_agent=request.META.get('HTTP_USER_AGENT', ''),
            success=True
        )
        
        # C·∫≠p nh·∫≠t last_login
        user.last_login = timezone.now()
        user.save(update_fields=['last_login'])
        
        # ƒêƒÉng nh·∫≠p user
        login(request, user)
        
        # Ki·ªÉm tra n·∫øu user ƒë√£ b·∫≠t 2FA
        if user.is_2fa_enabled:
            return Response({
                'detail': 'Y√™u c·∫ßu x√°c th·ª±c 2FA',
                'user_id': user.id,
                'requires_2fa': True
            }, status=status.HTTP_200_OK)
        
        # T·∫°o token
        refresh = RefreshToken.for_user(user)
        
        return Response({
            'user': UserSerializer(user, context={'request': request}).data,
            'tokens': {
                'refresh': str(refresh),
                'access': str(refresh.access_token),
            }
        }, status=status.HTTP_200_OK)
    
    def get_client_ip(self, request):
        x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')
        if x_forwarded_for:
            ip = x_forwarded_for.split(',')[0]
        else:
            ip = request.META.get('REMOTE_ADDR')
        return ip


class RegisterAPI(generics.CreateAPIView):
    """API ƒêƒÉng k√Ω t√†i kho·∫£n m·ªõi"""
    serializer_class = UserRegisterSerializer
    permission_classes = [AllowAny]
    
    def post(self, request, *args, **kwargs):
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        user = serializer.save()
        user.status = 'pending'
        user.save()
        
        # T·∫°o email verification token
        verification = EmailVerification.objects.create(user=user)
        
        # G·ª≠i email x√°c th·ª±c
        self.send_verification_email(user, verification)
        
        # T·∫°o token
        refresh = RefreshToken.for_user(user)
        
        return Response({
            'user': UserSerializer(user).data,
            'tokens': {
                'refresh': str(refresh),
                'access': str(refresh.access_token),
            }
        }, status=status.HTTP_201_CREATED)
    
    def send_verification_email(self, user, verification):
        """G·ª≠i email x√°c th·ª±c t√†i kho·∫£n"""
        verify_url = f"{settings.FRONTEND_URL}/verify-email/{verification.token}/"
        context = {
            'user': user,
            'verify_url': verify_url,
            'expiry_hours': settings.EMAIL_VERIFICATION_EXPIRY_HOURS
        }
        html_message = render_to_string('email/verification_email.html', context)
        plain_message = strip_tags(html_message)
        
        send_mail(
            subject='X√°c th·ª±c t√†i kho·∫£n c·ªßa b·∫°n',
            message=plain_message,
            from_email=settings.DEFAULT_FROM_EMAIL,
            recipient_list=[user.email],
            html_message=html_message,
            fail_silently=False
        )


class UserListAPI(generics.ListAPIView):
    """API Qu·∫£n l√Ω danh s√°ch ng∆∞·ªùi d√πng"""
    serializer_class = UserSerializer
    '''permission_classes = [IsAdminUser]'''
    queryset = User.objects.all()
    
    def get_queryset(self):
        queryset = super().get_queryset()
        
        # L·ªçc theo vai tr√≤
        role = self.request.query_params.get('role')
        if role:
            queryset = queryset.filter(role=role)
        
        # L·ªçc theo tr·∫°ng th√°i
        status = self.request.query_params.get('status')
        if status:
            queryset = queryset.filter(status=status)
        
        # T√¨m ki·∫øm
        search = self.request.query_params.get('search')
        if search:
            queryset = queryset.filter(
                Q(username__icontains=search) |
                Q(email__icontains=search) |
                Q(first_name__icontains=search) |
                Q(last_name__icontains=search)
            )
        
        return queryset


class UserDetailAPI(generics.RetrieveUpdateAPIView):
    """API Qu·∫£n l√Ω th√¥ng tin chi ti·∫øt ng∆∞·ªùi d√πng"""
    serializer_class = UserDetailSerializer
    permission_classes = [IsAuthenticated, IsOwnerOrAdmin]
    
    def get_object(self):
        user_id = self.kwargs.get('user_id')
        if user_id == 'me':
            return self.request.user
        return get_object_or_404(User, id=user_id)

    def get(self, request, *args, **kwargs):
        """L·∫•y th√¥ng tin chi ti·∫øt ng∆∞·ªùi d√πng"""
        user = self.get_object()
        serializer = self.get_serializer(user, context={'request': request})
        return Response(serializer.data)

    def put(self, request, *args, **kwargs):
        """C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng"""
        return self.update(request, *args, **kwargs)


class SellerRequestAPI(APIView):
    """
    üöÄ API ƒë·ªÉ y√™u c·∫ßu tr·ªü th√†nh ng∆∞·ªùi b√°n
    
    * Ch·ªâ cho ph√©p ng∆∞·ªùi d√πng ƒë√£ x√°c th·ª±c
    * Y√™u c·∫ßu tr·ªü th√†nh ng∆∞·ªùi b√°n t·ª´ kh√°ch h√†ng
    """
    permission_classes = [IsAuthenticated]
    
    def post(self, request):
        user = request.user
        
        # Ki·ªÉm tra user ƒë√£ l√† seller ch∆∞a
        if user.is_seller:
            return Response(
                {"detail": "B·∫°n ƒë√£ l√† ng∆∞·ªùi b√°n."}, 
                status=status.HTTP_400_BAD_REQUEST
            )
        
        # Ki·ªÉm tra user ƒë√£ g·ª≠i y√™u c·∫ßu tr·ªü th√†nh seller ch∆∞a
        if user.is_seller_request:
            return Response(
                {"detail": "B·∫°n ƒë√£ g·ª≠i y√™u c·∫ßu tr·ªü th√†nh ng∆∞·ªùi b√°n, vui l√≤ng ch·ªù ph√™ duy·ªát."}, 
                status=status.HTTP_400_BAD_REQUEST
            )
            
        # L·∫•y th√¥ng tin t·ª´ request ƒë·ªÉ l∆∞u c√°c chi ti·∫øt y√™u c·∫ßu
        data = request.data
        
        # L∆∞u y√™u c·∫ßu tr·ªü th√†nh seller
        user.is_seller_request = True
        user.save()
        
        # L∆∞u th√¥ng tin seller profile c∆° b·∫£n (ch∆∞a active)
        store_name = data.get('store_name', f"{user.username}'s Store")
        business_registration = data.get('business_registration', '')
        store_description = data.get('store_description', '')
        
        seller_profile, created = SellerProfile.objects.get_or_create(
            user=user,
            defaults={
                'store_name': store_name,
                'business_registration_number': business_registration,
                'store_description': store_description
            }
        )
        
        if not created:
            # C·∫≠p nh·∫≠t th√¥ng tin n·∫øu profile ƒë√£ t·ªìn t·∫°i
            seller_profile.store_name = store_name
            seller_profile.business_registration_number = business_registration
            seller_profile.store_description = store_description
            seller_profile.save()
        
        # L∆∞u log
        AuditLog.log_action(
            action_type=AuditLog.ActionType.SELLER_REQUEST,
            actor=user,
            target_user=user,
            description=f"Y√™u c·∫ßu tr·ªü th√†nh ng∆∞·ªùi b√°n c·ªßa {user.username}",
            request=request,
            new_state={'store_name': store_name}
        )
        
        # Th√¥ng b√°o th√†nh c√¥ng v√† th√™m th√¥ng tin c√≥ √≠ch
        estimated_time = timezone.now() + timezone.timedelta(days=2)
        
        return Response({
            "detail": "ƒê√£ g·ª≠i y√™u c·∫ßu tr·ªü th√†nh ng∆∞·ªùi b√°n th√†nh c√¥ng.",
            "request_id": str(user.id),
            "status": "pending",
            "submitted_at": timezone.now(),
            "estimated_review_by": estimated_time,
            "store_name": store_name,
            "next_steps": "Y√™u c·∫ßu c·ªßa b·∫°n ƒëang ƒë∆∞·ª£c xem x√©t. B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c email th√¥ng b√°o khi c√≥ k·∫øt qu·∫£."
        }, status=status.HTTP_201_CREATED)


class ApproveSellerAPI(APIView):
    """
    ‚úÖ API ph√™ duy·ªát/t·ª´ ch·ªëi y√™u c·∫ßu tr·ªü th√†nh ng∆∞·ªùi b√°n
    
    * Ch·ªâ admin m·ªõi c√≥ quy·ªÅn s·ª≠ d·ª•ng API n√†y
    * Ph√™ duy·ªát: is_approve=true, t·ª´ ch·ªëi: is_approve=false
    """
    permission_classes = [IsAuthenticated, IsAdmin]
    
    def post(self, request, user_id):
        # L·∫•y th√¥ng tin user
        seller_user = get_object_or_404(User, id=user_id)
        
        # Ki·ªÉm tra xem user n√†y c√≥ ph·∫£i l√† seller_request kh√¥ng
        if not seller_user.is_seller_request:
            return Response(
                {"detail": "Ng∆∞·ªùi d√πng n√†y ch∆∞a g·ª≠i y√™u c·∫ßu tr·ªü th√†nh ng∆∞·ªùi b√°n."}, 
                status=status.HTTP_400_BAD_REQUEST
            )
        
        # L·∫•y th√¥ng tin t·ª´ request
        is_approve = request.data.get('is_approve', False)
        reason = request.data.get('reason', '')
        
        # N·∫øu ph√™ duy·ªát y√™u c·∫ßu
        if is_approve:
            # C·∫≠p nh·∫≠t vai tr√≤ cho user
            seller_user.is_seller = True
            seller_user.is_seller_request = False
            
            # C·∫≠p nh·∫≠t status n·∫øu ch∆∞a active
            if seller_user.status == User.Status.PENDING:
                seller_user.status = User.Status.ACTIVE
                
            seller_user.save()
            
            # Ki·ªÉm tra v√† t·∫°o/c·∫≠p nh·∫≠t SellerProfile n·∫øu c·∫ßn
            if not hasattr(seller_user, 'seller_profile'):
                # T·∫°o profile m·∫∑c ƒë·ªãnh cho seller n·∫øu ch∆∞a c√≥
                seller_profile = SellerProfile.objects.create(
                    user=seller_user,
                    store_name=f"{seller_user.username}'s Store"
                )
            else:
                # C·∫≠p nh·∫≠t th√¥ng tin n·∫øu c·∫ßn
                seller_profile = seller_user.seller_profile
                seller_profile.save()
            
            # L∆∞u log h√†nh ƒë·ªông ph√™ duy·ªát
            AuditLog.log_action(
                action_type=AuditLog.ActionType.SELLER_APPROVE,
                actor=request.user,
                target_user=seller_user,
                description=f"Ph√™ duy·ªát y√™u c·∫ßu tr·ªü th√†nh ng∆∞·ªùi b√°n cho {seller_user.username}",
                request=request,
                previous_state={'is_seller': False, 'is_seller_request': True},
                new_state={'is_seller': True, 'is_seller_request': False}
            )
            
            # Tr·∫£ v·ªÅ th√¥ng tin chi ti·∫øt
            return Response({
                "detail": "ƒê√£ ph√™ duy·ªát ng∆∞·ªùi d√πng th√†nh ng∆∞·ªùi b√°n.",
                "user": {
                    "id": str(seller_user.id),
                    "username": seller_user.username,
                    "email": seller_user.email,
                    "roles": seller_user.get_roles()
                },
                "seller_profile": {
                    "store_name": seller_profile.store_name,
                    "profile_completion": "30%"
                },
                "next_steps": "Ng∆∞·ªùi b√°n n√™n ho√†n thi·ªán th√¥ng tin h·ªì s∆° v√† t·∫£i l√™n c√°c gi·∫•y t·ªù x√°c minh.",
                "profile_url": f"/seller/profile/{seller_user.id}/edit"
            }, status=status.HTTP_200_OK)
        else:
            # T·ª´ ch·ªëi y√™u c·∫ßu
            seller_user.is_seller_request = False
            seller_user.save()
            
            # L∆∞u log h√†nh ƒë·ªông t·ª´ ch·ªëi
            AuditLog.log_action(
                action_type=AuditLog.ActionType.SELLER_REJECT,
                actor=request.user,
                target_user=seller_user,
                description=f"T·ª´ ch·ªëi y√™u c·∫ßu tr·ªü th√†nh ng∆∞·ªùi b√°n cho {seller_user.username}. L√Ω do: {reason}",
                request=request,
                previous_state={'is_seller_request': True},
                new_state={'is_seller_request': False}
            )
            
            # Tr·∫£ v·ªÅ th√¥ng tin chi ti·∫øt
            return Response({
                "detail": "ƒê√£ t·ª´ ch·ªëi y√™u c·∫ßu tr·ªü th√†nh ng∆∞·ªùi b√°n.",
                "user": {
                    "id": str(seller_user.id),
                    "username": seller_user.username,
                    "email": seller_user.email
                },
                "reason": reason,
                "can_reapply": True,
                "reapply_after": timezone.now() + timezone.timedelta(days=30),
                "support_contact": "support@example.com"
            }, status=status.HTTP_200_OK)


class UploadAvatarAPI(APIView):
    """API T·∫£i l√™n ·∫£nh ƒë·∫°i di·ªán"""
    permission_classes = [IsAuthenticated]

    def post(self, request, *args, **kwargs):
        if 'avatar' not in request.FILES:
            return Response({'detail': 'Kh√¥ng c√≥ file ƒë∆∞·ª£c t·∫£i l√™n'}, status=status.HTTP_400_BAD_REQUEST)
        
        user = request.user
        user.avatar = request.FILES['avatar']
        user.save()
        
        return Response({
            'detail': 'T·∫£i l√™n ·∫£nh ƒë·∫°i di·ªán th√†nh c√¥ng',
            'avatar_url': request.build_absolute_uri(user.avatar.url)
        }, status=status.HTTP_200_OK)


class PendingSellerListAPI(APIView):
    """API L·∫•y danh s√°ch y√™u c·∫ßu tr·ªü th√†nh Seller ƒëang ch·ªù duy·ªát"""
    permission_classes = [IsAdminUser]

    def get(self, request):
        pending_sellers = User.objects.filter(role=User.Role.CUSTOMER, is_seller_request=True)
        serializer = UserSerializer(pending_sellers, many=True)
        return Response(serializer.data)


class RefreshTokenAPI(APIView):
    """API L√†m m·ªõi token"""
    permission_classes = [TokenRequiredPermission]

    def post(self, request):
        refresh_token = request.data.get('refresh')
        if not refresh_token:
            return Response({"error": "Refresh token is required"}, status=status.HTTP_400_BAD_REQUEST)

        try:
            refresh = RefreshToken(refresh_token)
            return Response({'access': str(refresh.access_token)})
        except Exception:
            return Response({"error": "Invalid refresh token"}, status=status.HTTP_401_UNAUTHORIZED)


class SellerListAPI(generics.ListAPIView):
    """API L·∫•y danh s√°ch ng∆∞·ªùi b√°n"""
    serializer_class = SellerSerializer
    permission_classes = [IsAuthenticated]
    
    def get_queryset(self):
        # Tr·∫£ v·ªÅ User objects c√≥ is_seller=True
        queryset = User.objects.filter(is_seller=True)
        
        # L·ªçc theo tr·∫°ng th√°i
        status = self.request.query_params.get('status')
        if status:
            queryset = queryset.filter(status=status)
        
        # T√¨m ki·∫øm
        search = self.request.query_params.get('search')
        if search:
            queryset = queryset.filter(
                Q(username__icontains=search) |
                Q(email__icontains=search) |
                Q(first_name__icontains=search) |
                Q(last_name__icontains=search)
            )
        
        return queryset
    
    def get_serializer_context(self):
        """
        Extra context provided to the serializer class.
        """
        context = super().get_serializer_context()
        context.update({"request": self.request})
        return context


class CustomerListAPI(generics.ListAPIView):
    """API L·∫•y danh s√°ch kh√°ch h√†ng"""
    serializer_class = CustomerSerializer
    permission_classes = [IsAdminUser]
    
    def get_queryset(self):
        queryset = User.objects.filter(is_customer=True)
        
        # L·ªçc theo tr·∫°ng th√°i
        status = self.request.query_params.get('status')
        if status:
            queryset = queryset.filter(status=status)
        
        # T√¨m ki·∫øm
        search = self.request.query_params.get('search')
        if search:
            queryset = queryset.filter(
                Q(username__icontains=search) |
                Q(email__icontains=search) |
                Q(first_name__icontains=search) |
                Q(last_name__icontains=search)
            )
        
        return queryset
        
    def get_serializer_context(self):
        """
        Extra context provided to the serializer class.
        """
        context = super().get_serializer_context()
        context.update({"request": self.request})
        return context


class UpdateAccountStatusAPI(APIView):
    """API C·∫≠p nh·∫≠t tr·∫°ng th√°i t√†i kho·∫£n"""
    permission_classes = [IsAdminUser]
    
    def post(self, request, *args, **kwargs):
        user_id = self.kwargs.get('user_id')
        user = get_object_or_404(User, id=user_id)
        
        status_value = request.data.get('status')
        if status_value not in dict(User.STATUS_CHOICES).keys():
            return Response({'detail': 'Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá'}, status=status.HTTP_400_BAD_REQUEST)
        
        user.status = status_value
        user.save()
        
        return Response({'detail': f'C·∫≠p nh·∫≠t tr·∫°ng th√°i t√†i kho·∫£n th√†nh c√¥ng: {status_value}'}, status=status.HTTP_200_OK)


class LogoutAPI(APIView):
    """API ƒêƒÉng xu·∫•t"""
    permission_classes = [IsAuthenticated]
    
    def post(self, request, *args, **kwargs):
        try:
            # L·∫•y refresh token t·ª´ request
            refresh_token = request.data.get('refresh_token')
            if not refresh_token:
                return Response({'detail': 'Refresh token is required'}, status=status.HTTP_400_BAD_REQUEST)
            
            # Blacklist token
            token = RefreshToken(refresh_token)
            token.blacklist()
            
            return Response({'detail': 'ƒêƒÉng xu·∫•t th√†nh c√¥ng'}, status=status.HTTP_200_OK)
        except Exception as e:
            return Response({'detail': str(e)}, status=status.HTTP_400_BAD_REQUEST)


class ChangePasswordAPI(APIView):
    """API Thay ƒë·ªïi m·∫≠t kh·∫©u"""
    permission_classes = [IsAuthenticated]
    
    def post(self, request, *args, **kwargs):
        serializer = ChangePasswordSerializer(data=request.data, context={'request': request})
        if serializer.is_valid():
            serializer.save()
            return Response({'detail': 'ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng'}, status=status.HTTP_200_OK)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


class PasswordResetRequestAPI(APIView):
    """API Y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u"""
    permission_classes = [AllowAny]
    
    def post(self, request, *args, **kwargs):
        serializer = PasswordResetRequestSerializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        
        email = serializer.validated_data['email']
        
        try:
            user = User.objects.get(email=email)
            reset = PasswordReset.objects.create(user=user)
            self.send_reset_email(user, reset)
        except User.DoesNotExist:
            # Kh√¥ng tr·∫£ v·ªÅ l·ªói ƒë·ªÉ ƒë·∫£m b·∫£o an to√†n th√¥ng tin
            pass
        
        return Response({
            'detail': 'N·∫øu email t·ªìn t·∫°i trong h·ªá th·ªëng, ch√∫ng t√¥i ƒë√£ g·ª≠i h∆∞·ªõng d·∫´n ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u.'
        }, status=status.HTTP_200_OK)
    
    def send_reset_email(self, user, reset):
        """G·ª≠i email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u"""
        reset_url = f"{settings.FRONTEND_URL}/reset-password/{reset.token}/"
        context = {
            'user': user,
            'reset_url': reset_url,
            'expiry_hours': settings.PASSWORD_RESET_EXPIRY_HOURS
        }
        html_message = render_to_string('email/password_reset_email.html', context)
        plain_message = strip_tags(html_message)
        
        send_mail(
            subject='ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u',
            message=plain_message,
            from_email=settings.DEFAULT_FROM_EMAIL,
            recipient_list=[user.email],
            html_message=html_message,
            fail_silently=False
        )


class PasswordResetConfirmAPI(APIView):
    """
    üîë API ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
    
    * Kh√¥ng y√™u c·∫ßu x√°c th·ª±c (v√¨ ng∆∞·ªùi d√πng ƒëang ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u)
    * X√°c nh·∫≠n m√£ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u v√† c·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi
    """
    permission_classes = [AllowAny]
    
    def post(self, request):
        # L·∫•y d·ªØ li·ªáu t·ª´ request
        token = request.data.get('token')
        password = request.data.get('password')
        password_confirm = request.data.get('password_confirm')
        
        # Ki·ªÉm tra token
        if not token:
            return Response(
                {"detail": "Token ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c cung c·∫•p."}, 
                status=status.HTTP_400_BAD_REQUEST
            )
            
        # Ki·ªÉm tra m·∫≠t kh·∫©u
        if not password or not password_confirm:
            return Response(
                {"detail": "Vui l√≤ng cung c·∫•p m·∫≠t kh·∫©u m·ªõi v√† x√°c nh·∫≠n m·∫≠t kh·∫©u."}, 
                status=status.HTTP_400_BAD_REQUEST
            )
            
        if password != password_confirm:
            return Response(
                {"detail": "M·∫≠t kh·∫©u m·ªõi v√† x√°c nh·∫≠n m·∫≠t kh·∫©u kh√¥ng kh·ªõp."}, 
                status=status.HTTP_400_BAD_REQUEST
            )
        
        # Ki·ªÉm tra ƒë·ªô ph·ª©c t·∫°p c·ªßa m·∫≠t kh·∫©u
        if len(password) < 8:
            return Response(
                {"detail": "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±."}, 
                status=status.HTTP_400_BAD_REQUEST
            )
            
        # T√¨m token ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
        try:
            password_reset = get_object_or_404(
                PasswordReset, 
                token=token, 
                is_used=False
            )
            
            # Ki·ªÉm tra token c√≤n h·∫°n kh√¥ng
            if not password_reset.is_valid():
                return Response(
                    {"detail": "Token ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ h·∫øt h·∫°n."}, 
                    status=status.HTTP_400_BAD_REQUEST
                )
                
            # L·∫•y user v√† c·∫≠p nh·∫≠t m·∫≠t kh·∫©u
            user = password_reset.user
            user.set_password(password)
            
            # L∆∞u th√¥ng tin th·ªùi gian thay ƒë·ªïi m·∫≠t kh·∫©u
            if hasattr(user, 'password_last_changed'):
                user.password_last_changed = timezone.now()
                
            user.save()
            
            # ƒê√°nh d·∫•u token ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng
            password_reset.is_used = True
            password_reset.save()
            
            # ƒêƒÉng xu·∫•t t·∫•t c·∫£ c√°c thi·∫øt b·ªã kh√°c (b·∫±ng c√°ch v√¥ hi·ªáu h√≥a t·∫•t c·∫£ refresh tokens)
            # ƒêi·ªÅu n√†y kh√¥ng ƒë∆∞·ª£c th·ª±c hi·ªán t·∫°i ƒë√¢y v√¨ c·∫ßn th√¥ng tin request
            # Thay v√†o ƒë√≥, s·∫Ω cung c·∫•p c·∫£nh b√°o b·∫£o m·∫≠t
            
            # T·∫°o token m·ªõi ƒë·ªÉ ƒëƒÉng nh·∫≠p
            refresh = RefreshToken.for_user(user)
            
            # Ghi log h√†nh ƒë·ªông ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
            AuditLog.log_action(
                action_type=AuditLog.ActionType.SECURITY_CHANGE,
                actor=user,
                target_user=user,
                description=f"ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng cho t√†i kho·∫£n {user.username}"
            )
            
            # Ghi log c·∫£nh b√°o b·∫£o m·∫≠t
            AuditLog.log_action(
                action_type=AuditLog.ActionType.SECURITY_ALERT,
                actor=user,
                target_user=user,
                description=f"M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi cho t√†i kho·∫£n {user.username}"
            )
            
            # Tr·∫£ v·ªÅ th√¥ng tin ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng
            return Response({
                "detail": "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng!",
                "user": {
                    "id": str(user.id),
                    "username": user.username,
                    "email": user.email
                },
                "tokens": {
                    "refresh": str(refresh),
                    "access": str(refresh.access_token)
                },
                "security_alert": True,
                "other_sessions_active": True,
                "security_recommendations": [
                    "H√£y ƒëƒÉng xu·∫•t kh·ªèi t·∫•t c·∫£ c√°c thi·∫øt b·ªã kh√°c n·∫øu b·∫°n kh√¥ng nh·∫≠n ra y√™u c·∫ßu n√†y.",
                    "B·∫≠t x√°c th·ª±c hai y·∫øu t·ªë ƒë·ªÉ b·∫£o v·ªá t√†i kho·∫£n c·ªßa b·∫°n."
                ]
            }, status=status.HTTP_200_OK)
            
        except (ValueError, PasswordReset.DoesNotExist):
            return Response(
                {"detail": "Token ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng."}, 
                status=status.HTTP_400_BAD_REQUEST
            )


class EmailVerificationRequestAPI(APIView):
    """API Y√™u c·∫ßu g·ª≠i l·∫°i email x√°c th·ª±c"""
    permission_classes = [IsAuthenticated]
    
    def post(self, request, *args, **kwargs):
        user = request.user
        
        if user.is_verified:
            return Response({'detail': 'T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c'}, status=status.HTTP_400_BAD_REQUEST)
        
        # T·∫°o token m·ªõi
        verification = EmailVerification.objects.create(user=user)
        
        # G·ª≠i email
        verify_url = f"{settings.FRONTEND_URL}/verify-email/{verification.token}/"
        context = {
            'user': user,
            'verify_url': verify_url,
            'expiry_hours': settings.EMAIL_VERIFICATION_EXPIRY_HOURS
        }
        html_message = render_to_string('email/verification_email.html', context)
        plain_message = strip_tags(html_message)
        
        send_mail(
            subject='X√°c th·ª±c t√†i kho·∫£n c·ªßa b·∫°n',
            message=plain_message,
            from_email=settings.DEFAULT_FROM_EMAIL,
            recipient_list=[user.email],
            html_message=html_message,
            fail_silently=False
        )
        
        return Response({'detail': 'Email x√°c th·ª±c ƒë√£ ƒë∆∞·ª£c g·ª≠i'}, status=status.HTTP_200_OK)


class EmailVerificationAPI(APIView):
    """
    ‚úâÔ∏è API x√°c th·ª±c email
    
    * Kh√¥ng y√™u c·∫ßu x√°c th·ª±c (v√¨ c√≥ th·ªÉ truy c·∫≠p t·ª´ email)
    * X√°c nh·∫≠n email ng∆∞·ªùi d√πng b·∫±ng token
    """
    permission_classes = [AllowAny]
    
    def get(self, request):
        # L·∫•y token t·ª´ query params
        token = request.query_params.get('token')
        if not token:
            return Response(
                {"detail": "Token x√°c th·ª±c kh√¥ng h·ª£p l·ªá."}, 
                status=status.HTTP_400_BAD_REQUEST
            )
        
        try:
            # X√°c nh·∫≠n token v√† user
            verification = get_object_or_404(EmailVerification, token=token, is_used=False)
            
            # Ki·ªÉm tra token c√≤n h·∫°n kh√¥ng
            if not verification.is_valid():
                return Response(
                    {"detail": "Token x√°c th·ª±c ƒë√£ h·∫øt h·∫°n."}, 
                    status=status.HTTP_400_BAD_REQUEST
                )
            
            # C·∫≠p nh·∫≠t tr·∫°ng th√°i x√°c th·ª±c cho user
            user = verification.user
            user.is_verified = True
            
            # K√≠ch ho·∫°t t√†i kho·∫£n n·∫øu ƒëang ·ªü tr·∫°ng th√°i pending
            if user.status == User.Status.PENDING:
                user.status = User.Status.ACTIVE
                
            user.save()
            
            # ƒê√°nh d·∫•u token ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng
            verification.is_used = True
            verification.save()
            
            # T·∫°o JWT token ƒë·ªÉ user c√≥ th·ªÉ ƒëƒÉng nh·∫≠p ngay
            refresh = RefreshToken.for_user(user)
            tokens = {
                'refresh': str(refresh),
                'access': str(refresh.access_token)
            }
            
            # Ghi log
            AuditLog.log_action(
                action_type=AuditLog.ActionType.USER_UPDATE,
                actor=user,
                target_user=user,
                description=f"X√°c minh email th√†nh c√¥ng cho {user.email}",
                previous_state={'is_verified': False, 'status': User.Status.PENDING},
                new_state={'is_verified': True, 'status': User.Status.ACTIVE}
            )
            
            # Tr·∫£ v·ªÅ th√¥ng tin v√† token
            return Response({
                "detail": "X√°c th·ª±c email th√†nh c√¥ng!",
                "user": {
                    "id": str(user.id),
                    "username": user.username,
                    "email": user.email,
                    "status": user.status,
                    "is_verified": user.is_verified,
                    "roles": user.get_roles()
                },
                "tokens": tokens,
                "redirect_url": "/login"
            }, status=status.HTTP_200_OK)
            
        except (ValueError, EmailVerification.DoesNotExist):
            return Response(
                {"detail": "Token x√°c th·ª±c kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng."}, 
                status=status.HTTP_400_BAD_REQUEST
            )


class TwoFactorSetupAPI(generics.GenericAPIView):
    """API Thi·∫øt l·∫≠p x√°c th·ª±c hai y·∫øu t·ªë"""
    serializer_class = TwoFactorSetupSerializer
    permission_classes = [IsAuthenticated]
    
    def get(self, request, *args, **kwargs):
        user = request.user
        
        if user.is_2fa_enabled:
            return Response({
                'is_enabled': True
            }, status=status.HTTP_200_OK)
        
        # T·∫°o secret m·ªõi n·∫øu ch∆∞a c√≥
        if not user.otp_secret:
            user.generate_otp_secret()
        
        # T·∫°o QR code
        user.generate_qr_code()
        
        return Response({
            'is_enabled': False,
            'secret': user.otp_secret,
            'qr_code': request.build_absolute_uri(user.otp_qr.url) if user.otp_qr else None
        }, status=status.HTTP_200_OK)
    
    def post(self, request, *args, **kwargs):
        serializer = self.get_serializer(data=request.data, context={'request': request})
        serializer.is_valid(raise_exception=True)
        user = serializer.save()
        
        return Response({
            'is_enabled': user.is_2fa_enabled,
            'detail': '2FA ƒë√£ ƒë∆∞·ª£c ' + ('b·∫≠t' if user.is_2fa_enabled else 't·∫Øt')
        }, status=status.HTTP_200_OK)


class TwoFactorVerifyAPI(APIView):
    """API X√°c th·ª±c OTP"""
    permission_classes = [AllowAny]
    
    def post(self, request, *args, **kwargs):
        serializer = TwoFactorVerifySerializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        
        user = serializer.validated_data['user']
        
        # L∆∞u l·ªãch s·ª≠ ƒëƒÉng nh·∫≠p
        LoginHistory.objects.create(
            user=user,
            ip_address=self.get_client_ip(request),
            user_agent=request.META.get('HTTP_USER_AGENT', ''),
            success=True
        )
        
        # T·∫°o token m·ªõi
        refresh = RefreshToken.for_user(user)
        
        return Response({
            'user': UserSerializer(user).data,
            'tokens': {
                'refresh': str(refresh),
                'access': str(refresh.access_token),
            }
        }, status=status.HTTP_200_OK)
    
    def get_client_ip(self, request):
        x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')
        if x_forwarded_for:
            ip = x_forwarded_for.split(',')[0]
        else:
            ip = request.META.get('REMOTE_ADDR')
        return ip


class LoginHistoryAPI(generics.ListAPIView):
    """API L·∫•y l·ªãch s·ª≠ ƒëƒÉng nh·∫≠p"""
    serializer_class = LoginHistorySerializer
    permission_classes = [IsAuthenticated]
    
    def get_queryset(self):
        return LoginHistory.objects.filter(user=self.request.user)


class PendingSellerRequestsAPI(generics.ListAPIView):
    """API l·∫•y danh s√°ch y√™u c·∫ßu tr·ªü th√†nh ng∆∞·ªùi b√°n ƒëang ch·ªù duy·ªát"""
    serializer_class = UserSerializer
    permission_classes = [IsAdminUser]
    
    def get_queryset(self):
        return User.objects.filter(is_seller_request=True, role='customer')


class SellerRequestListAPI(generics.ListAPIView):
    """API L·∫•y danh s√°ch y√™u c·∫ßu l√†m ng∆∞·ªùi b√°n"""
    serializer_class = UserSerializer
    permission_classes = [IsAdminUser]
    
    def get_queryset(self):
        return User.objects.filter(is_seller_request=True, is_seller=False)


class UserCheckAPI(APIView):
    """API Ki·ªÉm tra th√¥ng tin chi ti·∫øt ng∆∞·ªùi d√πng ƒë·ªÉ debug"""
    permission_classes = [IsAuthenticated]
    
    def get(self, request, *args, **kwargs):
        user = request.user
        
        # Ki·ªÉm tra t·∫•t c·∫£ c√°c tr∆∞·ªùng c√≥ s·∫µn
        fields = {
            'id': user.id,
            'username': user.username,
            'email': user.email,
            'phone': user.phone,
            'role': user.role,
            'status': user.status,
            'is_verified': user.is_verified,
            'is_seller_request': user.is_seller_request,
            'avatar': str(user.avatar) if user.avatar else None,
            'created_at': user.created_at,
            'updated_at': user.updated_at,
        }
        
        # Ki·ªÉm tra c√°c tr∆∞·ªùng boolean
        if hasattr(user, 'is_customer'):
            fields['is_customer'] = user.is_customer
        else:
            fields['is_customer'] = 'Field not found'
            
        if hasattr(user, 'is_seller'):
            fields['is_seller'] = user.is_seller
        else:
            fields['is_seller'] = 'Field not found'
            
        if hasattr(user, 'is_admin'):
            fields['is_admin'] = user.is_admin
        else:
            fields['is_admin'] = 'Field not found'
        
        # Ki·ªÉm tra ph∆∞∆°ng th·ª©c get_roles
        if hasattr(user, 'get_roles'):
            try:
                fields['get_roles'] = user.get_roles()
            except Exception as e:
                fields['get_roles_error'] = str(e)
        else:
            fields['get_roles'] = 'Method not found'
        
        return Response(fields, status=status.HTTP_200_OK)


class UserInsightsAPI(APIView):
    """
    üîç API ƒë·ªÉ l·∫•y c√°c insights v·ªÅ h√†nh vi ng∆∞·ªùi d√πng
    
    * C·∫ßn quy·ªÅn Admin ho·∫∑c ch√≠nh ng∆∞·ªùi d√πng ƒë√≥
    * Tr·∫£ v·ªÅ ph√¢n t√≠ch h√†nh vi mua s·∫Øm, s·ªü th√≠ch v√† l·ªãch s·ª≠ t∆∞∆°ng t√°c
    """
    permission_classes = [IsAuthenticated, (IsAdmin | IsSelf)]
    
    def get(self, request, user_id=None):
        # X√°c ƒë·ªãnh ng∆∞·ªùi d√πng c·∫ßn l·∫•y insights
        if user_id:
            user = get_object_or_404(User, id=user_id)
            # Ki·ªÉm tra quy·ªÅn: Ch·ªâ Admin ho·∫∑c ch√≠nh ng∆∞·ªùi d√πng m·ªõi c√≥ th·ªÉ xem
            if not request.user.is_admin and request.user.id != user.id:
                return Response(
                    {"detail": "B·∫°n kh√¥ng c√≥ quy·ªÅn xem insights c·ªßa ng∆∞·ªùi d√πng n√†y"}, 
                    status=status.HTTP_403_FORBIDDEN
                )
        else:
            user = request.user
            
        # Ki·ªÉm tra v√† l·∫•y profile ng∆∞·ªùi d√πng
        if not hasattr(user, 'customer_profile'):
            return Response(
                {"detail": "Ng∆∞·ªùi d√πng kh√¥ng c√≥ customer profile"}, 
                status=status.HTTP_404_NOT_FOUND
            )
            
        profile = user.customer_profile
        
        # D·ªØ li·ªáu ph√¢n t√≠ch
        insights = {
            "user_id": str(user.id),
            "username": user.username,
            
            # Th√¥ng tin mua s·∫Øm
            "shopping_behaviors": {
                "purchase_frequency": profile.purchase_frequency,
                "avg_order_value": str(profile.avg_order_value),
                "preferred_categories": profile.preferred_categories,
                "preferred_payment": profile.preferred_payment_method,
                "preferred_shipping": profile.preferred_shipping_method,
                "cart_abandonment_rate": profile.cart_abandonment_rate,
                "last_purchase": profile.last_purchase_at,
            },
            
            # Th√¥ng tin t∆∞∆°ng t√°c
            "engagement": {
                "last_active": profile.last_active,
                "review_activity": {
                    "review_count": profile.review_count,
                    "avg_rating_given": profile.avg_rating,
                },
                "wishlist_count": profile.wishlist_count,
                "marketing_preferences": {
                    "email_subscribed": profile.marketing_emails,
                    "sms_subscribed": profile.sms_notifications,
                }
            },
            
            # Khuy·∫øn ngh·ªã cho admin
            "recommendations": {
                "churn_risk": profile.churn_risk,
                "customer_segment": profile.customer_type,
                "lifetime_value": str(profile.lifetime_value),
                "potential_interests": profile.preferred_categories[:3] if profile.preferred_categories else [],
                "suggested_offers": self._get_suggested_offers(profile)
            },
            
            # Th√¥ng tin v·ªÅ phi·∫øu gi·∫£m gi√°
            "coupon_data": {
                "available_coupons": profile.coupon_count,
                "coupons_used": profile.coupon_usage,
                "special_offers": profile.special_offers
            }
        }
        
        # Ghi log ho·∫°t ƒë·ªông
        AuditLog.log_action(
            action_type=AuditLog.ActionType.USER_DATA_ACCESS,
            actor=request.user,
            target_user=user,
            description=f"Truy c·∫≠p insights c·ªßa ng∆∞·ªùi d√πng {user.username}",
            request=request
        )
        
        return Response(insights, status=status.HTTP_200_OK)
    
    def _get_suggested_offers(self, profile):
        """H√†m ph·ª• tr·ª£ ƒë·ªÉ ƒë·ªÅ xu·∫•t ∆∞u ƒë√£i ph√π h·ª£p cho ng∆∞·ªùi d√πng"""
        suggested = []
        
        # N·∫øu kh√°ch h√†ng c√≥ loyalty points cao
        if profile.loyalty_points > 500:
            suggested.append({
                "type": "loyalty_discount",
                "title": "Gi·∫£m gi√° ƒë·∫∑c bi·ªát cho kh√°ch h√†ng trung th√†nh",
                "discount": "15%"
            })
            
        # N·∫øu kh√°ch h√†ng c√≥ nguy c∆° churn cao
        if profile.churn_risk > 0.6:
            suggested.append({
                "type": "retention_offer",
                "title": "∆Øu ƒë√£i gi·ªØ ch√¢n kh√°ch h√†ng",
                "discount": "20%",
                "expiry_days": 7
            })
            
        # N·∫øu kh√°ch h√†ng c√≥ gi√° tr·ªã cao
        if profile.lifetime_value > 10000000:  # 10 tri·ªáu VND
            suggested.append({
                "type": "vip_offer",
                "title": "∆Øu ƒë√£i VIP",
                "perks": ["Mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn", "∆Øu ti√™n x·ª≠ l√Ω", "Qu√† t·∫∑ng"]
            })
            
        return suggested


class SellerAnalyticsAPI(APIView):
    """
    üìä API ƒë·ªÉ l·∫•y c√°c ch·ªâ s·ªë ph√¢n t√≠ch chi ti·∫øt cho ng∆∞·ªùi b√°n
    
    * C·∫ßn quy·ªÅn Admin ho·∫∑c ch√≠nh ng∆∞·ªùi b√°n ƒë√≥
    * Tr·∫£ v·ªÅ c√°c ch·ªâ s·ªë hi·ªáu su·∫•t, xu h∆∞·ªõng v√† so s√°nh
    """
    permission_classes = [IsAuthenticated, (IsAdmin | IsSeller)]
    
    def get(self, request, seller_id=None):
        # X√°c ƒë·ªãnh ng∆∞·ªùi b√°n c·∫ßn l·∫•y analytics
        if seller_id:
            seller = get_object_or_404(User, id=seller_id, is_seller=True)
            # Ki·ªÉm tra quy·ªÅn: Ch·ªâ Admin ho·∫∑c ch√≠nh ng∆∞·ªùi b√°n m·ªõi c√≥ th·ªÉ xem
            if not request.user.is_admin and request.user.id != seller.id:
                return Response(
                    {"detail": "B·∫°n kh√¥ng c√≥ quy·ªÅn xem analytics c·ªßa ng∆∞·ªùi b√°n n√†y"}, 
                    status=status.HTTP_403_FORBIDDEN
                )
        else:
            if not request.user.is_seller:
                return Response(
                    {"detail": "B·∫°n kh√¥ng ph·∫£i l√† ng∆∞·ªùi b√°n"}, 
                    status=status.HTTP_403_FORBIDDEN
                )
            seller = request.user
            
        # Ki·ªÉm tra v√† l·∫•y profile ng∆∞·ªùi b√°n
        if not hasattr(seller, 'seller_profile'):
            return Response(
                {"detail": "Kh√¥ng t√¨m th·∫•y h·ªì s∆° ng∆∞·ªùi b√°n"}, 
                status=status.HTTP_404_NOT_FOUND
            )
            
        profile = seller.seller_profile
        
        # T√≠nh to√°n t·ª∑ l·ªá chuy·ªÉn ƒë·ªïi (gi·∫£ ƒë·ªãnh, s·∫Ω ƒë∆∞·ª£c t√≠nh to√°n t·ª´ d·ªØ li·ªáu th·ª±c t·∫ø)
        conversion_rate = 0.05  # 5% m·∫∑c ƒë·ªãnh
        
        # D·ªØ li·ªáu ph√¢n t√≠ch
        analytics = {
            "seller_id": str(seller.id),
            "store_name": profile.store_name or f"{seller.username}'s Store",
            
            # Ch·ªâ s·ªë kinh doanh
            "business_metrics": {
                "total_sales": str(profile.total_sales),
                "products_count": profile.products_count,
                "total_orders": 0,  # S·∫Ω l·∫•y t·ª´ order service
                "conversion_rate": conversion_rate,
                "return_rate": profile.return_rate,
                "followers": profile.total_followers,
            },
            
            # Ch·ªâ s·ªë d·ªãch v·ª•
            "service_metrics": {
                "store_rating": profile.store_rating,
                "avg_shipping_time": profile.avg_shipping_time,
                "response_time": profile.response_time,
                "reviews_count": profile.total_reviews,
            },
            
            # Tr·∫°ng th√°i x√°c minh
            "verification_status": {
                "identity_verified": profile.is_identity_verified,
                "business_verified": profile.is_business_verified,
            },
            
            # Performance so v·ªõi trung b√¨nh
            "performance_comparison": {
                "sales_vs_average": "above_average",  # Placeholder - s·∫Ω ƒë∆∞·ª£c t√≠nh to√°n t·ª´ d·ªØ li·ªáu th·ª±c t·∫ø
                "rating_vs_average": "average" if 3.5 <= profile.store_rating <= 4.2 else "below_average" if profile.store_rating < 3.5 else "above_average",
                "shipping_vs_average": "needs_improvement" if profile.avg_shipping_time and profile.avg_shipping_time > 3 else "good",
                "response_vs_average": "needs_improvement" if profile.response_time and profile.response_time > 24 else "good",
            },
            
            # Khuy·∫øn ngh·ªã c·∫£i thi·ªán
            "improvement_suggestions": self._get_improvement_suggestions(profile),
            
            # Th√¥ng tin ho·∫°t ƒë·ªông
            "activity": {
                "last_active": profile.last_active,
                "opened_since": profile.opened_since,
                "account_health": "good" if profile.store_rating >= 4.0 and profile.return_rate < 0.05 else "average" if profile.store_rating >= 3.0 else "needs_improvement"
            }
        }
        
        # Ghi log ho·∫°t ƒë·ªông
        AuditLog.log_action(
            action_type=AuditLog.ActionType.SELLER_DATA_ACCESS,
            actor=request.user,
            target_user=seller,
            description=f"Truy c·∫≠p analytics c·ªßa ng∆∞·ªùi b√°n {seller.username}",
            request=request
        )
        
        return Response(analytics, status=status.HTTP_200_OK)
    
    def _get_improvement_suggestions(self, profile):
        """H√†m ph·ª• tr·ª£ ƒë·ªÉ ƒë·ªÅ xu·∫•t c√°c c·∫£i thi·ªán cho ng∆∞·ªùi b√°n"""
        suggestions = []
        
        # Ki·ªÉm tra t·ª´ng ch·ªâ s·ªë v√† ƒë∆∞a ra g·ª£i √Ω
        if profile.store_rating < 4.0:
            suggestions.append({
                "area": "customer_satisfaction",
                "title": "C·∫£i thi·ªán ƒë√°nh gi√° c·ª≠a h√†ng",
                "description": "ƒê√°nh gi√° c·ª≠a h√†ng c·ªßa b·∫°n th·∫•p h∆°n m·ª©c l√Ω t∆∞·ªüng. H√£y xem x√©t c√°c ƒë√°nh gi√° c·ªßa kh√°ch h√†ng v√† c·∫£i thi·ªán d·ªãch v·ª•.",
                "action_url": "/seller/reviews"
            })
            
        if profile.response_time and profile.response_time > 12:
            suggestions.append({
                "area": "customer_service",
                "title": "C·∫£i thi·ªán th·ªùi gian ph·∫£n h·ªìi",
                "description": "Th·ªùi gian ph·∫£n h·ªìi kh√°ch h√†ng c·ªßa b·∫°n qu√° d√†i. H√£y c·ªë g·∫Øng tr·∫£ l·ªùi kh√°ch h√†ng nhanh h∆°n ƒë·ªÉ c·∫£i thi·ªán tr·∫£i nghi·ªám.",
                "action_url": "/seller/messages"
            })
            
        if profile.avg_shipping_time and profile.avg_shipping_time > 3:
            suggestions.append({
                "area": "logistics",
                "title": "C·∫£i thi·ªán th·ªùi gian giao h√†ng",
                "description": "Th·ªùi gian giao h√†ng trung b√¨nh c·ªßa b·∫°n d√†i h∆°n ƒë·ªëi th·ªß. H√£y t·ªëi ∆∞u quy tr√¨nh x·ª≠ l√Ω ƒë∆°n h√†ng v√† giao h√†ng.",
                "action_url": "/seller/shipping-settings"
            })
            
        if profile.return_rate > 0.05:  # 5%
            suggestions.append({
                "area": "product_quality",
                "title": "Gi·∫£m t·ªâ l·ªá ho√†n tr·∫£",
                "description": "T·ªâ l·ªá ho√†n tr·∫£ c·ªßa b·∫°n cao h∆°n m·ª©c trung b√¨nh. H√£y xem x√©t l√Ω do kh√°ch h√†ng tr·∫£ h√†ng v√† c·∫£i thi·ªán ch·∫•t l∆∞·ª£ng s·∫£n ph·∫©m.",
                "action_url": "/seller/returns"
            })
            
        if not profile.is_identity_verified or not profile.is_business_verified:
            suggestions.append({
                "area": "verification",
                "title": "X√°c minh danh t√≠nh v√† doanh nghi·ªáp",
                "description": "Ho√†n th√†nh x√°c minh ƒë·ªÉ tƒÉng ƒë·ªô tin c·∫≠y v√† ti·∫øp c·∫≠n nhi·ªÅu kh√°ch h√†ng h∆°n.",
                "action_url": "/seller/verification"
            })
        
        return suggestions


class AccountSecurityAPI(APIView):
    """
    üîí API ƒë·ªÉ l·∫•y th√¥ng tin v·ªÅ b·∫£o m·∫≠t t√†i kho·∫£n
    
    * C·∫ßn x√°c th·ª±c
    * Tr·∫£ v·ªÅ th√¥ng tin phi√™n ƒëƒÉng nh·∫≠p, thay ƒë·ªïi g·∫ßn ƒë√¢y v√† c√°c c·∫£nh b√°o
    """
    permission_classes = [IsAuthenticated]
    
    def get(self, request):
        user = request.user
        
        # L·∫•y l·ªãch s·ª≠ ƒëƒÉng nh·∫≠p g·∫ßn ƒë√¢y
        login_history = user.login_history.all()[:5]
        recent_logins = []
        
        for login in login_history:
            recent_logins.append({
                "timestamp": login.login_time,
                "ip_address": login.ip_address,
                "device": login.device,
                "location": login.location,
                "success": login.success
            })
        
        # L·∫•y l·ªãch s·ª≠ thay ƒë·ªïi t·ª´ AuditLog
        recent_changes = []
        user_changes = AuditLog.objects.filter(
            target_user=user,
            action_type__in=[
                AuditLog.ActionType.USER_UPDATE,
                AuditLog.ActionType.SECURITY_CHANGE,
                AuditLog.ActionType.SELLER_APPROVE
            ]
        )[:5]
        
        for change in user_changes:
            recent_changes.append({
                "timestamp": change.timestamp,
                "action": change.get_action_type_display(),
                "actor": change.actor.username if change.actor else "System",
                "description": change.description
            })
        
        # X√°c ƒë·ªãnh c√°c c·∫£nh b√°o b·∫£o m·∫≠t
        security_alerts = []
        
        # Ki·ªÉm tra 2FA
        if not user.is_2fa_enabled and (user.is_admin or user.is_seller):
            security_alerts.append({
                "level": "warning",
                "message": "B·∫°n ch∆∞a b·∫≠t x√°c th·ª±c hai y·∫øu t·ªë. ƒê√¢y l√† t√≠nh nƒÉng b·∫£o m·∫≠t quan tr·ªçng cho t√†i kho·∫£n c·ªßa b·∫°n.",
                "action": "enable_2fa",
                "action_url": "/user/security/2fa"
            })
        
        # Ki·ªÉm tra ƒëƒÉng nh·∫≠p t·ª´ ƒë·ªãa ƒëi·ªÉm l·∫°
        # (gi·∫£ ƒë·ªãnh logic ki·ªÉm tra ƒë·ªãa ƒëi·ªÉm ƒëƒÉng nh·∫≠p b·∫•t th∆∞·ªùng)
        unusual_logins = login_history.filter(location__isnull=False).exclude(location__in=["Hanoi, Vietnam", "Ho Chi Minh City, Vietnam"])
        if unusual_logins.exists():
            security_alerts.append({
                "level": "high",
                "message": "Ph√°t hi·ªán ƒëƒÉng nh·∫≠p t·ª´ ƒë·ªãa ƒëi·ªÉm b·∫•t th∆∞·ªùng.",
                "action": "review_logins",
                "action_url": "/user/security/login-history"
            })
        
        # D·ªØ li·ªáu ph·∫£n h·ªìi
        security_data = {
            "user_id": str(user.id),
            "username": user.username,
            "security_status": "good" if user.is_2fa_enabled else "needs_improvement",
            
            # Th√¥ng tin b·∫£o m·∫≠t
            "security_features": {
                "two_factor_auth": user.is_2fa_enabled,
                "password_last_changed": user.password_last_changed if hasattr(user, 'password_last_changed') else None,
                "recovery_email": user.email,
                "recovery_phone": user.phone
            },
            
            # L·ªãch s·ª≠ ƒëƒÉng nh·∫≠p v√† thay ƒë·ªïi
            "recent_activity": {
                "login_sessions": recent_logins,
                "recent_changes": recent_changes
            },
            
            # C·∫£nh b√°o b·∫£o m·∫≠t
            "security_alerts": security_alerts
        }
        
        return Response(security_data, status=status.HTTP_200_OK)


class UserProfileAPI(APIView):
    permission_classes = [IsAuthenticated]
    
    def get(self, request):
        serializer = UserSerializer(request.user)
        return Response(serializer.data)
        
    def put(self, request):
        serializer = UserSerializer(request.user, data=request.data, partial=True)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)