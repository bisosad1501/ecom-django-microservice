from rest_framework import serializers
from .models import User, CustomerProfile, SellerProfile


class UserSerializer(serializers.ModelSerializer):
    """üî• Serializer chung cho User (bao g·ªìm c·∫£ Admin, Seller, Customer)"""

    avatar_url = serializers.SerializerMethodField()

    class Meta:
        model = User
        fields = [
            "id", "username", "email", "phone", "role", "status", "is_verified",
            "is_seller_request", "avatar", "avatar_url", "created_at", "updated_at"
        ]
        read_only_fields = ["id", "status", "is_verified", "created_at", "updated_at"]

    def get_avatar_url(self, obj):
        """Tr·∫£ v·ªÅ URL ·∫£nh ƒë·∫°i di·ªán"""
        request = self.context.get("request")
        if obj.avatar:
            return request.build_absolute_uri(obj.avatar.url) if request else obj.avatar.url
        return request.build_absolute_uri("/media/avatars/default.png") if request else "/media/avatars/default.png"


class CustomerSerializer(serializers.ModelSerializer):
    """üî• Serializer cho kh√°ch h√†ng (Customer)"""

    class Meta:
        model = CustomerProfile
        fields = ["address", "province", "total_orders", "loyalty_points",
                  "last_purchase_at", "total_spent", "coupon_count"]


class SellerSerializer(serializers.ModelSerializer):
    """üî• Serializer cho ng∆∞·ªùi b√°n (Seller)"""

    class Meta:
        model = SellerProfile
        fields = ["store_name", "business_license_number", "total_sales",
                  "store_rating", "bank_account_number", "bank_name"]


class UserRegisterSerializer(serializers.ModelSerializer):
    """üî• Serializer ƒëƒÉng k√Ω t√†i kho·∫£n m·ªõi"""

    password = serializers.CharField(write_only=True, min_length=6)

    class Meta:
        model = User
        fields = ["username", "email", "password"]

    def create(self, validated_data):
        """T·∫°o user m·ªõi v·ªõi vai tr√≤ m·∫∑c ƒë·ªãnh l√† CUSTOMER"""
        user = User.objects.create_user(
            username=validated_data["username"],
            email=validated_data["email"],
            password=validated_data["password"]
        )
        user.role = User.Role.CUSTOMER
        user.status = User.AccountStatus.PENDING
        user.save()

        # T·∫°o profile Customer m·∫∑c ƒë·ªãnh
        CustomerProfile.objects.create(user=user)

        return user


class SellerRequestSerializer(serializers.ModelSerializer):
    """üî• Serializer ƒë·ªÉ g·ª≠i y√™u c·∫ßu tr·ªü th√†nh Seller"""

    class Meta:
        model = User
        fields = ["is_seller_request"]

    def update(self, instance, validated_data):
        """X·ª≠ l√Ω y√™u c·∫ßu ƒëƒÉng k√Ω Seller"""
        if instance.role != User.Role.CUSTOMER:
            raise serializers.ValidationError("Ch·ªâ kh√°ch h√†ng m·ªõi c√≥ th·ªÉ y√™u c·∫ßu tr·ªü th√†nh Seller.")

        instance.is_seller_request = True
        instance.save()
        return instance


class ApproveSellerSerializer(serializers.ModelSerializer):
    """üî• Serializer ƒë·ªÉ Admin duy·ªát t√†i kho·∫£n Seller"""

    class Meta:
        model = User
        fields = ["role"]

    def update(self, instance, validated_data):
        """X·ª≠ l√Ω duy·ªát t√†i kho·∫£n Seller"""
        if instance.role != User.Role.CUSTOMER or not instance.is_seller_request:
            raise serializers.ValidationError("Ch·ªâ kh√°ch h√†ng c√≥ y√™u c·∫ßu m·ªõi ƒë∆∞·ª£c duy·ªát l√†m Seller.")

        instance.role = User.Role.SELLER
        instance.is_seller_request = False
        instance.status = User.AccountStatus.ACTIVE
        instance.is_verified = True
        instance.save()

        # N·∫øu ch∆∞a c√≥ SellerProfile, m·ªõi t·∫°o
        if not hasattr(instance, "seller_profile"):
            SellerProfile.objects.create(user=instance)

        return instance

class AdminCreateUserSerializer(serializers.ModelSerializer):
    """üî• Serializer ƒë·ªÉ Admin t·∫°o t√†i kho·∫£n m·ªõi (Admin ho·∫∑c Seller)"""

    password = serializers.CharField(write_only=True, min_length=6)

    class Meta:
        model = User
        fields = ["username", "email", "phone", "password", "role"]

    def create(self, validated_data):
        """Admin t·∫°o t√†i kho·∫£n m·ªõi"""
        role = validated_data["role"]
        if role not in [User.Role.ADMIN, User.Role.SELLER]:
            raise serializers.ValidationError("Admin ch·ªâ c√≥ th·ªÉ t·∫°o t√†i kho·∫£n Admin ho·∫∑c Seller.")

        user = User.objects.create_user(
            username=validated_data["username"],
            email=validated_data["email"],
            phone=validated_data["phone"],
            password=validated_data["password"]
        )

        user.role = role
        user.status = User.AccountStatus.ACTIVE
        user.is_verified = True
        user.save()

        # N·∫øu l√† Seller, t·∫°o profile Seller lu√¥n
        if role == User.Role.SELLER:
            SellerProfile.objects.create(user=user)

        return user


class UserProfileSerializer(serializers.ModelSerializer):
    """üî• Serializer ƒë·ªÉ c·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n ng∆∞·ªùi d√πng"""
    id = serializers.UUIDField(read_only=True)
    customer_profile = CustomerSerializer(required=False)
    seller_profile = SellerSerializer(required=False)

    class Meta:
        model = User
        fields = [
            "id", "username", "email", "phone", "avatar",
            "customer_profile", "seller_profile"
        ]
        read_only_fields = ["username"]  # Kh√¥ng cho ph√©p ƒë·ªïi username

    def update(self, instance, validated_data):
        """C·∫≠p nh·∫≠t th√¥ng tin user, ƒë·∫£m b·∫£o h·ªó tr·ª£ c·∫£ Customer & Seller"""
        if 'customer_profile' in validated_data:
            customer_profile_data = validated_data.pop('customer_profile')
            if hasattr(instance, "customer_profile"):
                CustomerProfile.objects.filter(user=instance).update(**customer_profile_data)
            else:
                CustomerProfile.objects.create(user=instance, **customer_profile_data)

        if 'seller_profile' in validated_data:
            seller_profile_data = validated_data.pop('seller_profile')
            if hasattr(instance, "seller_profile"):
                SellerProfile.objects.filter(user=instance).update(**seller_profile_data)
            else:
                SellerProfile.objects.create(user=instance, **seller_profile_data)

        # C·∫≠p nh·∫≠t th√¥ng tin c∆° b·∫£n c·ªßa user
        return super().update(instance, validated_data)

    def to_representation(self, instance):
        """T√πy ch·ªânh d·ªØ li·ªáu tr·∫£ v·ªÅ: Seller v·∫´n c√≥ th·ªÉ c√≥ CustomerProfile"""
        ret = super().to_representation(instance)

        # N·∫øu User l√† Seller nh∆∞ng v·∫´n c√≥ CustomerProfile, gi·ªØ l·∫°i c·∫£ hai
        if instance.role == User.Role.CUSTOMER:
            ret.pop('seller_profile', None)
        elif instance.role == User.Role.SELLER:
            # Ki·ªÉm tra xem c√≥ `customer_profile` kh√¥ng, n·∫øu c√≥ th√¨ gi·ªØ l·∫°i
            if not hasattr(instance, "customer_profile"):
                ret.pop('customer_profile', None)

        return ret